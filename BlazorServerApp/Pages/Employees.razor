@using Entities
@using Blazorise

@page "/employeelist"
@inherits EmployeeBase
<style type="text/css">
    .alignHeader {
        text-align: center;
    }
</style>
@if (Employees == null)
{

}
else
{

    <DataGrid TItem="Employee" Data="@Employees" Filterable="true" Editable="true" ShowPager="true" PageSize="3" Bordered="true" Hoverable="true" EditMode="DataGridEditMode.Popup" HeaderRowClass="alignHeader">
        <DataGridColumn TItem="Employee" Field="@nameof(Employee.Id)" Caption="ID" Width="120" TextAlignment="TextAlignment.Center" Sortable="true"></DataGridColumn>
        <DataGridColumn TItem="Employee" Field="@nameof(Employee.Name)" Caption="Name" Width="200" TextAlignment="TextAlignment.Center" Sortable="true" Editable="true">
            <DisplayTemplate>
                @($"{( context as Employee ).Name}")
            </DisplayTemplate>
            <EditTemplate>
                <TextEdit Text="@((string)(((CellEditContext)context).CellValue))" TextChanged="@( (v) => ((CellEditContext)context).CellValue = v)" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Employee" Field="@nameof(Employee.Email)" Caption="Email" Width="200" TextAlignment="TextAlignment.Center" Sortable="true" Editable="true">
            @*<DisplayTemplate>
                    @($"{( context as Employee ).Email}")
                </DisplayTemplate>
                <EditTemplate>
                    <TextEdit Text="@((string)(((CellEditContext)context).CellValue))" TextChanged="@(v => ((CellEditContext)context).CellValue = v)" />
                </EditTemplate>*@
        </DataGridColumn>
        <DataGridColumn TItem="Employee" Field="@nameof(Employee.Department)" Caption="Department" Width="200" TextAlignment="TextAlignment.Center" Sortable="true" Editable="true">
            @*<DisplayTemplate>
                    @($"{( context as Employee ).Department}")
                </DisplayTemplate>
                <EditTemplate>
                    <TextEdit Text="@((string)(((CellEditContext)context).CellValue))" TextChanged="@(v => ((CellEditContext)context).CellValue = v)" />
                </EditTemplate>*@
        </DataGridColumn>
        <DataGridCommandColumn TItem="Employee" Width="200">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
        </DataGridCommandColumn>
    </DataGrid>

    <Modal @ref="modalRef" Closing="@OnModalClosing">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Add/Edit Employee</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Value="@nameof(Employee.Name)" Placeholder="Enter name..." />
                </Field>
                <Field>
                    <FieldLabel>Email</FieldLabel>
                    <TextEdit @bind-Value="@nameof(Employee.Email)" Placeholder="Enter emailId" />
                </Field>
                <Field>
                    <FieldLabel>Department</FieldLabel>
                    <TextEdit @bind-Value="@nameof(Employee.Department)" Placeholder="Enter department" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@EditEmployee">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    //SnackBar for undo delete

}
