@inherits LayoutComponentBase

    <MatAppBar Style="z-index: 100;" Class="mat">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
                <MatAppBarTitle>MatBlazor App</MatAppBarTitle>
            </MatAppBarSection>
            @*<MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <MatMenu @ref="Menu" style="z-index: 100;">
                    <ThemeColorSelector @bind-Value="@ThemePrimary"></ThemeColorSelector>
                </MatMenu>
            </MatAppBarSection>*@
        </MatAppBarRow>
    </MatAppBar>
    <MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">

        <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up" HiddenChanged="@ModelDrawerHiddenChanged">
            <ChildContent>
                <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <CustomMenu></CustomMenu>
                </MatDrawer>
            </ChildContent>
            <ElseContent>
                <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <CustomMenu></CustomMenu>
                </MatDrawer>
            </ElseContent>
        </MatHidden>


        <MatDrawerContent Class="mdc-theme--background">
            <MatAppBarAdjust></MatAppBarAdjust>
            <div class="body-wrapper">
                @Body
            </div>
        </MatDrawerContent>

    </MatDrawerContainer>

@*<MudLayout>
        <CustomNavMenu />
    <MudMainContent Style="margin-left:250px;border:solid 1px;">
        <MudContainer MaxWidth="MaxWidth.False" Class="" Style="">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>*@

@code {


    protected void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    bool _navMenuOpened = true;

    void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        this.StateHasChanged();
    }

    #region Theme applies
    //BaseMatIconButton themeButton;
    //BaseMatListItem ThemeListItem;
    //BaseMatMenu Menu;

    //[CascadingParameter]
    //MatTheme theme { get; set; }


    //public string ThemePrimary
    //{
    //    get { return theme.Primary; }
    //    set
    //    {
    //        theme.Primary = value;
    //        theme.ThemeHasChanged();
    //    }
    //}
    //public void OnClickButton(MouseEventArgs e)
    //{
    //    _ = this.Menu.OpenAsync(themeButton.Ref);
    //}

    //public void OnClickListItem(MouseEventArgs e)
    //{
    //    _ = this.Menu.OpenAsync(ThemeListItem.Ref);
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    //bool lazySnackbarIsOpen = false;
    //protected async override Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();

    //    Task.Run(async () =>
    //    {
    //        await Task.Delay(TimeSpan.FromSeconds(5));
    //        this.lazySnackbarIsOpen = true;
    //        await InvokeAsync(() => { this.StateHasChanged(); });
    //    });
    //}

    //private BaseMatIconButton SmallMenuButton;
    //private BaseMatMenu SmallMenu;

    //public void OpenSmallMenu(MouseEventArgs e)
    //{
    //    _ = this.SmallMenu.OpenAsync(SmallMenuButton.Ref);
    //}

    //public void Dispose()
    //{
    //}
    #endregion
}
